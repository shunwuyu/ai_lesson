// 函数f2就被包括在函数f1内部，这时f1内部的所有局部
// 变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，
// 对f1就是不可见的。这就是Javascript语言特有的"链式作用域"结构
// （chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，
// 父对象的所有变量，对子对象都是可见的，反之则不成立。
function f1(){

    var n=999;
    
    function f2(){
        console.log(n); // 999
    }
    
}

// 既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，
// 我们不就可以在f1外部读取它的内部变量了吗！