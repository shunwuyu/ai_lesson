# 项目代码架构设计

## 1. 技术选型
- 前端框架: React
- UI组件库: Ant Design
- 构建工具: Vite
- 开发语言: TypeScript

## 2. 功能模块分析

### 2.1 文件转换模块
- 需要后端服务: 是
- 原因: 文件格式转换需要服务器端处理能力
- 主要功能:
  - 文件上传
  - 格式选择
  - 转换处理
  - 结果下载

### 2.2 图片压缩模块
- 需要后端服务: 否
- 原因: 可使用浏览器端JavaScript库完成压缩
- 主要功能:
  - 图片上传
  - 压缩质量选择
  - 压缩预览
  - 结果下载

### 2.3 图片裁剪模块
- 需要后端服务: 否
- 原因: 可使用前端Canvas API完成裁剪
- 主要功能:
  - 图片上传
  - 裁剪区域选择
  - 实时预览
  - 结果下载

### 2.4 图片格式转换模块
- 需要后端服务: 否
- 原因: 可使用浏览器端Canvas API完成格式转换
- 主要功能:
  - 图片上传
  - 格式选择
  - 转换预览
  - 结果下载

### 2.5 图片水印模块
- 需要后端服务: 否
- 原因: 可使用前端Canvas API完成水印添加
- 主要功能:
  - 图片上传
  - 水印文字设置
  - 位置调整
  - 实时预览
  - 结果下载

## 3. 公共组件设计

### 3.1 文件上传组件
- 支持拖拽上传
- 支持点击选择
- 文件类型限制
- 文件大小限制

### 3.2 下载组件
- 文件下载处理
- 下载进度显示

### 3.3 导航组件
- 顶部导航栏
- 路由控制

## 4. 数据流设计
- 使用React Context管理全局状态
- 使用组件内state管理局部状态
- 文件转换模块使用API与后端交互 