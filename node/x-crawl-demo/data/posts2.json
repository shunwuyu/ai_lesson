{
  "elements": [
    {
      "title": "独立做项目，拿得起放得下",
      "content": "如果从项目的视角看，无论是个人还是公司，都无法做到同时兼顾：时间质量和成本。慢工出细活，产品想做的有质感，都要很多时间和心血的投入，但是面对成本的压力，又必须做出适当的取舍。"
    },
    {
      "title": "Java线程池的几个常见问题",
      "content": "1. Java自带的线程池？有哪些实现？ Java通过Executors工厂类提供了几种快速创建线程池的便捷方法。这些方法内部都是通过ThreadPoolExecutor或ForkJoinPool的不同参数配置来实现的。 主要实现有： newFixedThreadPool(int nThreads)"
    },
    {
      "title": "ReactPHP、Swoole、Webman、FrankenPHP 深度对比 找到最适合你的 PHP 异步方案",
      "content": "ReactPHP、Swoole、Webman、FrankenPHP 深度对比 找到最适合你的 PHP 异步方案 PHP 项目做大了，经常会遇到这样的问题：用户一多，系统就卡。为什么？因为传统 PHP 处理请求时，遇到数据库查询、API 调用这些操作，就得老老实实等着，一个接一个地来。用户体验？那就别"
    },
    {
      "title": "我的后台管理项目报Error: spawn …esbuild.exe ENOENT了",
      "content": "最近因公司换新设备，导致很多项目需要重新配置开发环境，最近我的后台管理项目就遇到了Error: spawn ...esbuild.exe ENOENT了，一起来看看我发现的一些解决方法"
    },
    {
      "title": "【URP】[Unity核心Buffer及其应用]",
      "content": "本文介绍了Unity URP渲染管线中的核心Buffer类型及其应用。主要包括常量缓冲区(存储全局数据)、模板缓冲区(控制渲染区域)、深度缓冲区(管理物体遮挡)和帧缓冲区(存储最终输出)。文章详细说明了各类缓冲区的功能特点、实现方式及优化策略，如常量缓冲区减少数据传输、模板缓冲区实现特效、深度缓冲区"
    },
    {
      "title": "CMake构建学习笔记24-使用通用脚本构建PROJ和GEOS",
      "content": "1. 通用脚本 在之前的文章《CMake构建学习笔记21-通用的CMake构建脚本》中我们创建了一个通用的cmake构建脚本cmake-build.ps1： param( [string]$SourceLocalPath, [string]$BuildDir, [string]$Generator"
    },
    {
      "title": "【App Service】在Azure环境中如何查看App Service实例当前的网络连接情况呢？",
      "content": "问题描述 在使用 Azure App Service（Windows 和 Linux）部署应用时，如何分析网络连接情况，尤其是查看特定端口（如 443, 3306, 6380等）的连接状态？这对于排查连接异常、验证服务是否正常监听端口、确认后端服务是否建立连接等场景非常关键。 在本地环境中，可以使用"
    },
    {
      "title": "NVIDIA Kernel级性能分析工具Nsight Compute入门详解",
      "content": "本文较为全面的说明了Nsight Compute工具的使用方法，以及Report各个页面信息的详细含义，能帮助用户快速的掌握Compute工具的初步使用方法！"
    },
    {
      "title": "机器学习中的数据表示",
      "content": "目录数据概念标量 Scalar向量 Vector矩阵 Matrix张量 Tensor小试牛刀小结 数据概念 标量、向量、矩阵、张量 这几个概念是机器学习中数据表示的基础，简单的科普下。 标量 Scalar 标量是最基本、最简单的量，只有大小，没有方向。 例如：一个人的年龄25岁、房间的温度30度、物"
    },
    {
      "title": "Django事务",
      "content": "1. 事务基础概念 1.1 什么是事务？ 事务是具有以下特性（ACID）的数据库操作单元： 原子性 (Atomicity)：事务是一个不可分割的工作单位，事务中的操作要么全部发生，要么全部不发生。 一致性 (Consistency)：事务必须使数据库从一个一致性状态变换到另一个一致性状态。例如，转账"
    },
    {
      "title": "彩笔运维勇闯机器学习--逻辑回归",
      "content": "前言 从本节开始，我们的机器学习之旅进入了下一个篇章。之前讨论的是回归算法，回归算法主要用于预测数据。而本节讨论的是分类问题，简而言之就是按照规则将数据分类 而要讨论的逻辑回归，虽然名字叫做回归，它要解决的是分类问题 开始探索 scikit-learn 还是老规矩，先来个例子，再讨论原理 假设以下场"
    },
    {
      "title": "实现 TB 级聚合带宽，JuiceFS 分布式缓存网络优化实践",
      "content": "随着数据量和模型规模的爆炸性增长，多个客户端频繁访问相同数据的场景变得愈发普遍。分布式缓存通过聚合多个节点的本地缓存，形成大容量缓存池，从而提升缓存命中率、增强读带宽和 IOPS，降低读延迟，满足高性能的需求。 然而，节点间的数据交换极度依赖网络性能。带宽不足会限制数据传输速度并增加延迟；过高的网络"
    },
    {
      "title": "ConcurrentHashMap的Null禁令：一场针对“渣男”Null的完美防卫战",
      "content": "引言：一场值得深思的设计抉择 在Java集合框架的浩瀚宇宙中，ConcurrentHashMap（以下简称CHM）无疑是最耀眼的明星之一。作为高并发环境的王者，它以其卓越的性能和线程安全性征服了无数开发者。但这位王者有一个看似\"不近人情\"的原则：坚决拒绝null作为key或value。 这个设计决策"
    },
    {
      "title": "【干货】这些Claude Code使用技巧对你应该有用",
      "content": "前言 Claude Code两脚踢翻cursor，现阶段已经是最牛逼的AI工具了，这篇文章来聊聊我的Claude Code使用技巧，可能对你有用。 关注公众号：【前端欧阳】，加入我的AI交流群。 注册Claude账号 想要使用Claude Code必须注册claude，并且开通pro或者max。这里"
    },
    {
      "title": "gRPC不是银弹：为内网极致性能，如何设计自己的RPC协议？",
      "content": "自研RPC协议：为性能而生的赛道利器 尽管gRPC凭借其标准化、跨语言和基于HTTP/2的强大特性，在公网和云原生环境中大放异彩，但在某些特定的内网环境中，对性能、延迟和资源占用的要求可能更为苛刻。HTTP/2虽然高效，但其帧结构和头部处理机制相较于专为内网设计的极简协议，仍可能引入不必要的开销。"
    },
    {
      "title": "TinyEngine 2.8 正式上线：AI能力就位、Docker部署更高效！",
      "content": "本文分享自华为云社区《TinyEngine 2.8 正式上线：AI能力就位、Docker部署更高效！》，作者：OpenTiny。 前言 TinyEngine低代码引擎使开发者能够定制低代码平台。它是低代码平台的底座，提供可视化搭建页面等基础能力，既可以通过线上搭配组合，也可以通过cli创建个人工程进"
    },
    {
      "title": "在富文本编辑器中实现 Markdown 流式增量解析算法",
      "content": "在先前我们我们实现了SSE流式输出的实现，以及基于向量检索的RAG服务，这些实现都可以算作是AI Infra的范畴。这里我们再来聊一下在SSE流式输出的基础上，将Markdown解析和富文本编辑器的渲染结合起来，实现编辑器的增量解析算法，同样属于文档场景下的Infra建设。 概述 在SSE流式输出的"
    },
    {
      "title": "[Java/OracleJDK/OpenJDK] JDK厂商的识别与替换",
      "content": "0 序言 jdk版本＞ oracle jdk 8u202，对于企业而言，将有知识产权风险。此时，建议使用低版本jdk，或者使用openjdk。 即 oracle jdk 8u202，无产权风险 1 概述: Jdk的厂商 1.1 识别JDK的厂商 识别Java命令的厂商 方法1：要查看Java的厂商信"
    },
    {
      "title": "自己做产品，如何选技术栈？",
      "content": "选型思路非常简单直接，自己熟悉擅长的优先选择，不会的尽量选通用和省时的；避免使用冷门组件，遇到无法解决的问题，很难搜索参考案例，不但会浪费时间，甚至会影响心态。"
    },
    {
      "title": "解决大型 PHP 应用中 URL 路由 挑战模块化路由系统",
      "content": "随着 PHP 应用的不断发展，那些在小型项目中运行良好的简单路由结构很快就会变得难以驾驭。起初可能只是处理用户注册和博客文章浏览的几个路由，但很快就会扩展成一个庞大的路由网络，每个路由都与特定的功能模块相关联，比如 API 接口、用户仪表板或管理后台。随着路由数量的激增，管理这些路由就成了一项令人头"
    }
  ],
  "type": "multiple"
}