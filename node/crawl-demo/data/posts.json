{
  "elements": [
    {
      "title": "Group By很慢，如何定位？如何优化？",
      "content": "前言 有些小伙伴在工作中可能遇到过这样的场景：原本运行良好的Group By查询，随着数据量的增长，执行时间从几秒变成了几分钟甚至几小时。 页面加载缓慢，用户抱怨连连，DBA着急上火。 这种性能下降往往是在不知不觉中发生的，背后一定有着深层次的原因。 今天这篇文章跟大家一起聊聊group by变慢后 ..."
    },
    {
      "title": "What is CSP （内容安全策略）?",
      "content": "目录它是如何保证安全的？如何实施 CSP？安全测试者如何绕过 CSP？只能辅助，不可做主力 内容安全策略（CSP） 内容安全策略（Content Security Policy, CSP） 是一个额外的安全层，用于帮助检测和缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入攻击。 你可以把它看作是 ..."
    },
    {
      "title": "k8s控制器定时把k8s apiserver内存和cpu打得很高",
      "content": "近期发现，k8s apiserver的内存和cpu定时（每隔10h）被客户一个控制器打的很高，有个小突刺。排查发现，用户的控制器开启了resyncPeriod，默认值就是10h。 一般来说controller runtime框架、knative框架，都会默认这个值为10h。不同的是，controll ..."
    },
    {
      "title": "微信小程序端智能项目工程化实践",
      "content": "本文介绍可以在微信小程序上应用的端智能技术方案，聚焦 TensorFlow.js 推理和微信原生推理，详细讲解这两种方案在项目中的应用过程，为小程序开发者提供可复用的端智能技术选型策略与工程化解决方案 ..."
    },
    {
      "title": "能够动态推断与生成DTO是Node生态的一个重要里程碑",
      "content": "而 Vona ORM 首创 DTO 动态推断与生成能力，解放我们的双手，显著提升生产力。甚至可以说，对于构建更加优雅的 Node.js 后端框架而言，能够动态推断与生成 DTO，是非常重要的里程碑 ..."
    },
    {
      "title": "【URP】[投影Projector]解析与应用",
      "content": "《Unity投影系统对比与应用实践》摘要：本文对比分析了Unity中传统Projector组件与URPDecalProjector的技术特点。传统Projector基于摄像机空间矩阵计算，存在性能瓶颈；而URPDecalProjector采用延迟渲染路径，在URP12后提供更优性能。文章详解了两种方... ..."
    },
    {
      "title": "记一次 .NET 某CRM物流行业管理系统 崩溃分析",
      "content": "一：背景 1. 讲故事 微信上有位朋友找到我，说他们部署在linux上的 .net 程序会隔几天崩溃一次，一直找不到原因，让我帮忙看下怎么回事，让朋友用 procdump 抓了一个dump下来，然后就是正式的分析啦。 二：崩溃分析 1. 为什么会崩溃 拿到dump之后，双击dump打开，会看到程序崩 ..."
    },
    {
      "title": "我一个写Java的，怎么就开始玩K8s和Jenkins了？！",
      "content": "前几天接到一个新任务，要求把以前部署在私有服务器上的项目，全都搬到云端去部署。之前的发布流程其实挺简单的，都是在本地打包好，然后通过文件传输把打好的jar包或者前端编译好的文件夹，直接替换到服务器上。挺传统也挺直接的。 但这次不一样了，老板希望上线流程能更自动化，得用Jenkins实现一键部署，减少 ..."
    },
    {
      "title": "独立做项目，拿得起放得下",
      "content": "如果从项目的视角看，无论是个人还是公司，都无法做到同时兼顾：时间质量和成本。慢工出细活，产品想做的有质感，都要很多时间和心血的投入，但是面对成本的压力，又必须做出适当的取舍。 ..."
    },
    {
      "title": "Java线程池的几个常见问题",
      "content": "1. Java自带的线程池？有哪些实现？ Java通过Executors工厂类提供了几种快速创建线程池的便捷方法。这些方法内部都是通过ThreadPoolExecutor或ForkJoinPool的不同参数配置来实现的。 主要实现有： newFixedThreadPool(int nThreads) ..."
    },
    {
      "title": "ReactPHP、Swoole、Webman、FrankenPHP 深度对比 找到最适合你的 PHP 异步方案",
      "content": "ReactPHP、Swoole、Webman、FrankenPHP 深度对比 找到最适合你的 PHP 异步方案 PHP 项目做大了，经常会遇到这样的问题：用户一多，系统就卡。为什么？因为传统 PHP 处理请求时，遇到数据库查询、API 调用这些操作，就得老老实实等着，一个接一个地来。用户体验？那就别 ..."
    },
    {
      "title": "我的后台管理项目报Error: spawn …esbuild.exe ENOENT了",
      "content": "最近因公司换新设备，导致很多项目需要重新配置开发环境，最近我的后台管理项目就遇到了Error: spawn ...esbuild.exe ENOENT了，一起来看看我发现的一些解决方法 ..."
    },
    {
      "title": "【URP】[Unity核心Buffer及其应用]",
      "content": "本文介绍了Unity URP渲染管线中的核心Buffer类型及其应用。主要包括常量缓冲区(存储全局数据)、模板缓冲区(控制渲染区域)、深度缓冲区(管理物体遮挡)和帧缓冲区(存储最终输出)。文章详细说明了各类缓冲区的功能特点、实现方式及优化策略，如常量缓冲区减少数据传输、模板缓冲区实现特效、深度缓冲区... ..."
    },
    {
      "title": "CMake构建学习笔记24-使用通用脚本构建PROJ和GEOS",
      "content": "1. 通用脚本 在之前的文章《CMake构建学习笔记21-通用的CMake构建脚本》中我们创建了一个通用的cmake构建脚本cmake-build.ps1： param( [string]$SourceLocalPath, [string]$BuildDir, [string]$Generator, ..."
    },
    {
      "title": "【App Service】在Azure环境中如何查看App Service实例当前的网络连接情况呢？",
      "content": "问题描述 在使用 Azure App Service（Windows 和 Linux）部署应用时，如何分析网络连接情况，尤其是查看特定端口（如 443, 3306, 6380等）的连接状态？这对于排查连接异常、验证服务是否正常监听端口、确认后端服务是否建立连接等场景非常关键。 在本地环境中，可以使用 ..."
    },
    {
      "title": "NVIDIA Kernel级性能分析工具Nsight Compute入门详解",
      "content": "本文较为全面的说明了Nsight Compute工具的使用方法，以及Report各个页面信息的详细含义，能帮助用户快速的掌握Compute工具的初步使用方法！ ..."
    },
    {
      "title": "机器学习中的数据表示",
      "content": "目录数据概念标量 Scalar向量 Vector矩阵 Matrix张量 Tensor小试牛刀小结 数据概念 标量、向量、矩阵、张量 这几个概念是机器学习中数据表示的基础，简单的科普下。 标量 Scalar 标量是最基本、最简单的量，只有大小，没有方向。 例如：一个人的年龄25岁、房间的温度30度、物 ..."
    },
    {
      "title": "Django事务",
      "content": "1. 事务基础概念 1.1 什么是事务？ 事务是具有以下特性（ACID）的数据库操作单元： 原子性 (Atomicity)：事务是一个不可分割的工作单位，事务中的操作要么全部发生，要么全部不发生。 一致性 (Consistency)：事务必须使数据库从一个一致性状态变换到另一个一致性状态。例如，转账 ..."
    },
    {
      "title": "彩笔运维勇闯机器学习--逻辑回归",
      "content": "前言 从本节开始，我们的机器学习之旅进入了下一个篇章。之前讨论的是回归算法，回归算法主要用于预测数据。而本节讨论的是分类问题，简而言之就是按照规则将数据分类 而要讨论的逻辑回归，虽然名字叫做回归，它要解决的是分类问题 开始探索 scikit-learn 还是老规矩，先来个例子，再讨论原理 假设以下场 ..."
    },
    {
      "title": "实现 TB 级聚合带宽，JuiceFS 分布式缓存网络优化实践",
      "content": "随着数据量和模型规模的爆炸性增长，多个客户端频繁访问相同数据的场景变得愈发普遍。分布式缓存通过聚合多个节点的本地缓存，形成大容量缓存池，从而提升缓存命中率、增强读带宽和 IOPS，降低读延迟，满足高性能的需求。 然而，节点间的数据交换极度依赖网络性能。带宽不足会限制数据传输速度并增加延迟；过高的网络 ..."
    }
  ],
  "type": "multiple"
}